#![feature(test)]
extern crate test;
extern crate mc_types;

use test::*;

#[bench]
fn read_nbt_big(b: &mut Bencher){
    use mc_types::NbtRead;
    let mut blob = vec![
0xa, // compound #1
0x0, 0xb, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64, // "hello world"
    0x1, // byte
    0x0, 0x5, 0x31, 0x62, 0x79, 0x74, 0x65, // "1byte"
        0x80, // -128
    0x8, // string
    0x0, 0x7, 0x38, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, // "8string"
        0x0, 0x5, 0x68, 0x65, 0x6c, 0x6c, 0x6f, // hello
    0x7, // byte array
    0x0, 0xb, 0x37, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, // "7byte_array"
    0x0, 0x0, 0x0, 0x4, //len = 4
        0xc, 0xde, 0x38, 0xb2, // [12, -34, 56, -78]
    0x9, // list tag
    0x0, 0x9, 0x39, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x74, // "9list_int"
    0x3, // inner type: int
    0x0, 0x0, 0x0, 0x3, // len: 3 
        0x7f, 0xff, 0xff, 0xff, 
        0x6e, 0xee, 0xee, 0xee, 
        0x5d, 0xdd, 0xdd, 0xdd,
    0x5, // float
    0x0, 0x6, 0x35, 0x66, 0x6c, 0x6f, 0x61, 0x74,  // "5float"
        0x40, 0x49, 0xf, 0xdb, // float value of math constant PI
    0x4, // long
    0x0, 0x5, 0x34, 0x6c, 0x6f, 0x6e, 0x67, // "4long"
        0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, // i64::min_value()
    0x6, // double
    0x0, 0x7, 0x36, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, // "6double"
        0x40, 0x5, 0xbf, 0xa, 0x8b, 0x14, 0x57, 0x69, // float value of math constant E
    0x2, // short
    0x0, 0x6, 0x32, 0x73, 0x68, 0x6f, 0x72, 0x74, // "2short"
        0x7f, 0xff, // i16::max_value()
    0x3, // int
    0x0, 0x4, 0x33, 0x69, 0x6e, 0x74, // "3int"
        0x7f, 0xff, 0xff, 0xff, // i16::max_value()
    0xa, // compund #2
    0x0, 0x9, 0x31, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, // "1compund"
        0x5, // float
        0x0, 0xb, 0x31, 0x31, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x31, 0x2e, 0x30, // "11float_1.0"
            0x3f, 0x80, 0x0, 0x0, // 1.0
        0x6, // double
        0x0, 0xd, 0x31, 0x32, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x2d, 0x31, 0x2e, 0x30, // "12double_-1.0"
            0xbf, 0xf0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, // -1.0
        0x0, // end of #2
    0xb, // int array
    0x0, 0xa, 0x32, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, // "2int_array" 
    0x0, 0x0, 0x0, 0x4, // len: 4
        0x1a, 0xaa, 0xaa, 0xaa, 
        0x2b, 0xbb, 0xbb, 0xbb, 
        0x2c, 0xcc, 0xcc, 0xcc, 
        0x1d, 0xdd, 0xdd, 0xdd, 
    0x0, // end of #1
];      
    b.iter(|| {
        let mut cur = std::io::Cursor::new(&mut blob);
        let _data = cur.read_nbt_data();
    });
}

#[bench]
fn read_nbt_small(b: &mut Bencher){
    use mc_types::NbtRead;
    let mut blob = vec![
0xa, // compound #1
0x0, 0x5, 0x68, 0x65, 0x6c, 0x6c, 0x6f, // "hello"
    0x1, // byte
    0x0, 0x4, 0x62, 0x79, 0x74, 0x65, // "byte"
        0x80, // -128
    0x0, // end of #1
];      
    b.iter(|| {
        let mut cur = std::io::Cursor::new(&mut blob);
        let _data = cur.read_nbt_data();
    });
}